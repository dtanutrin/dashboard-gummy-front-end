# Guia Completo de Endpoints - Dashboard Gummy API
## Autenticacao e Tokens
### Sistema de Autenticacao
- Tipo: JWT (JSON Web Token)
- Header: Authorization: Bearer
- Localizacao do Token: Header Authorization
- Formato: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
### Estrutura do Token JWT
```
{
  "userId": 123,
  "email": "usuario@email.
  com",
  "role": "Admin" | "User",
  "iat": 1234567890,
  "exp": 1234567890
}
```
### Middleware de Autenticacao
- Arquivo: middleware/authenticateToken.js
- Funcao: Valida token JWT em todas as rotas protegidas
- Respostas de Erro:
  - 401: Token nao fornecido
  - 403: Token invalido ou expirado
## Endpoints de Autenticacao
### POST /api/auth/login
Descricao: Fazer login no sistema

Body:

```
{
  "email": "usuario@email.
  com",
  "password": "senha123"
}
```
Resposta de Sucesso (200):

```
{
  "token": 
  "eyJhbGciOiJIUzI1NiIsInR5cC
  I6IkpXVCJ9...",
  "user": {
    "id": 123,
    "email": "usuario@email.
    com",
    "role": "Admin"
  }
}
```
Respostas de Erro:

- 400: Email e senha obrigatorios
- 401: Credenciais invalidas
- 500: Erro interno do servidor
## Endpoints de Areas
### GET /api/areas
Descricao: Listar todas as areas (filtradas por permissao)
Autenticacao: Obrigatoria
Permissao: Qualquer usuario autenticado

Headers:

```
Authorization: Bearer <token>
```
Resposta de Sucesso (200):

```
[
  {
    "id": 1,
    "name": "Vendas",
    "dashboards": [
      {
        "id": 1,
        "name": "Dashboard 
        Vendas Q1",
        "areaId": 1
      }
    ]
  }
]
```
Logica de Filtro:

- Admin: Ve todas as areas e todos os dashboards
- User: Ve apenas areas com acesso (UserAreaAccess) e apenas dashboards com permissao especifica (UserDashboardAccess)
### GET /api/areas/:id
Descricao: Obter area especifica por ID (filtrada por permissao)
Autenticacao: Obrigatoria
Permissao: Acesso a area especifica

Headers:

```
Authorization: Bearer <token>
```
Resposta de Sucesso (200):

```
{
  "id": 1,
  "name": "Vendas",
  "dashboards": [
    {
      "id": 1,
      "name": "Dashboard 
      Vendas Q1",
      "areaId": 1
    }
  ]
}
```
Respostas de Erro:

- 403: Acesso negado a area
- 404: Area nao encontrada
- 500: Erro interno do servidor
### POST /api/areas
Descricao: Criar nova area
Autenticacao: Obrigatoria
Permissao: Apenas Admin

Headers:

```
Authorization: Bearer <token>
```
Body:

```
{
  "name": "Nova Area"
}
```
Resposta de Sucesso (201):

```
{
  "id": 2,
  "name": "Nova Area"
}
```
### PUT /api/areas/:id
Descricao: Atualizar area existente
Autenticacao: Obrigatoria
Permissao: Apenas Admin

### DELETE /api/areas/:id
Descricao: Deletar area
Autenticacao: Obrigatoria
Permissao: Apenas Admin

## Endpoints de Dashboards
### GET /api/dashboards
Descricao: Listar todos os dashboards (filtrados por permissao)
Autenticacao: Obrigatoria

### GET /api/dashboards/:id
Descricao: Obter dashboard especifico
Autenticacao: Obrigatoria
Permissao: Acesso especifico ao dashboard

## Endpoints de Permissoes de Dashboard
### GET /api/dashboard-permissions/user/:userId
Descricao: Obter permissoes de dashboard de um usuario
Autenticacao: Obrigatoria
Permissao: Admin ou proprio usuario

Headers:

```
Authorization: Bearer <token>
```
Resposta de Sucesso (200):

```
[
  {
    "id": 1,
    "userId": 123,
    "dashboardId": 1,
    "dashboard": {
      "id": 1,
      "name": "Dashboard 
      Vendas Q1",
      "areaId": 1,
      "area": {
        "id": 1,
        "name": "Vendas"
      }
    }
  }
]
```
### POST /api/dashboard-permissions/grant
Descricao: Conceder permissao de dashboard a um usuario
Autenticacao: Obrigatoria
Permissao: Apenas Admin

Headers:

```
Authorization: Bearer <token>
```
Body:

```
{
  "userId": 123,
  "dashboardId": 1
}
```
Resposta de Sucesso (201):

```
{
  "id": 1,
  "userId": 123,
  "dashboardId": 1,
  "createdAt": 
  "2024-01-01T00:00:00.000Z"
}
```
### POST /api/dashboard-permissions/revoke
Descricao: Revogar permissao de dashboard de um usuario
Autenticacao: Obrigatoria
Permissao: Apenas Admin

Headers:

```
Authorization: Bearer <token>
```
Body:

```
{
  "userId": 123,
  "dashboardId": 1
}
```
Resposta de Sucesso (200):

```
{
  "message": "Permissao 
  revogada com sucesso."
}
```
## Endpoints de Usuarios
### GET /api/users
Descricao: Listar todos os usuarios
Autenticacao: Obrigatoria
Permissao: Apenas Admin

### GET /api/users/:id
Descricao: Obter usuario especifico
Autenticacao: Obrigatoria
Permissao: Admin ou proprio usuario

## Sistema de Permissoes
### Estrutura de Permissoes UserAreaAccess
- Tabela: UserAreaAccess
- Funcao: Define quais areas um usuario pode acessar
- Campos: userId, areaId UserDashboardAccess
- Tabela: UserDashboardAccess
- Funcao: Define quais dashboards especificos um usuario pode ver
- Campos: userId, dashboardId
### Logica de Filtro por Permissao Para Usuarios Regulares:
1. Areas: Apenas areas com registro em UserAreaAccess
2. Dashboards: Apenas dashboards com registro em UserDashboardAccess
3. Filtro Granular: Mesmo tendo acesso a area, so ve dashboards especificos permitidos Para Administradores:
- Acesso Total: Veem todas as areas e todos os dashboards
- Sem Filtros: Nao aplicam verificacoes de UserAreaAccess ou UserDashboardAccess
## Configuracao Frontend
### Interceptor Axios Recomendado
```
// Configuracao do Axios
const api = axios.create({
  baseURL: 'http://
  localhost:5000/api',
  timeout: 10000
});

// Interceptor para 
adicionar token
api.interceptors.request.use(
  (config) => {
    const token = 
    localStorage.getItem
    ('token');
    if (token) {
      config.headers.
      Authorization = 
      `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject
  (error)
);

// Interceptor para tratar 
erros
api.interceptors.response.use
(
  (response) => response,
  (error) => {
    if (error.response?.
    status === 401) {
      // Token invalido ou 
      expirado
      localStorage.removeItem
      ('token');
      window.location.href = 
      '/login';
    }
    return Promise.reject
    (error);
  }
);
```
### Chamadas de API Essenciais Login
```
const login = async (email, 
password) => {
  try {
    const response = await 
    api.post('/auth/login', 
    { email, password });
    const { token, user } = 
    response.data;
    localStorage.setItem
    ('token', token);
    return { token, user };
  } catch (error) {
    throw error.response?.
    data || error;
  }
};
``` Buscar Areas (Filtradas)
```
const getAreas = async () => 
{
  try {
    const response = await 
    api.get('/areas');
    return response.data; // 
    Ja vem filtrado por 
    permissao
  } catch (error) {
    throw error.response?.
    data || error;
  }
};
``` Gerenciar Permissoes (Admin)
```
// Conceder permissao
const 
grantDashboardPermission = 
async (userId, dashboardId) 
=> {
  try {
    const response = await 
    api.post('/
    dashboard-permissions/
    grant', {
      userId,
      dashboardId
    });
    return response.data;
  } catch (error) {
    throw error.response?.
    data || error;
  }
};

// Revogar permissao
const 
revokeDashboardPermission = 
async (userId, dashboardId) 
=> {
  try {
    const response = await 
    api.post('/
    dashboard-permissions/
    revoke', {
      userId,
      dashboardId
    });
    return response.data;
  } catch (error) {
    throw error.response?.
    data || error;
  }
};

// Buscar permissoes de 
usuario
const 
getUserDashboardPermissions 
= async (userId) => {
  try {
    const response = await 
    api.get(`/
    dashboard-permissions/
    user/${userId}`);
    return response.data;
  } catch (error) {
    throw error.response?.
    data || error;
  }
};
```
## Resolucao de Problemas Comuns
### Erro 401 - Unauthorized
- Causa: Token nao fornecido ou malformado
- Solucao: Verificar se token esta sendo enviado no header Authorization: Bearer
### Erro 403 - Forbidden
- Causa: Token invalido, expirado ou sem permissao
- Solucao: Renovar token ou verificar permissoes do usuario
### Erro 404 - Not Found
- Causa: Area ou dashboard nao encontrado ou sem acesso
- Solucao: Verificar se usuario tem permissao para acessar o recurso
### Dashboards nao aparecem na tela de gerenciamento
- Causa: Usuario nao tem permissao especifica (UserDashboardAccess)
- Solucao: Admin deve conceder permissao via /api/dashboard-permissions/grant
## Exemplo de Fluxo Completo
### Login do Usuario
```
const { token, user } = 
await login('usuario@email.
com', 'senha123');
```
### Buscar Areas (ja filtradas)
```
const areas = await getAreas
(); // So retorna areas com 
permissao
```
### Admin: Gerenciar Permissoes
```
// Conceder acesso ao 
dashboard ID 1 para usuario 
ID 123
await 
grantDashboardPermission
(123, 1);

// Verificar permissoes do 
usuario
const permissions = await 
getUserDashboardPermissions
(123);
```
### Usuario: Ver Dashboards Permitidos
```
const areas = await getAreas
();
// Cada area so tera os 
dashboards que o usuario tem 
permissao
```
## Estrutura de Dados
### Tabelas Principais
- User: Usuarios do sistema
- Area: Areas de negocio
- Dashboard: Dashboards dentro das areas
- UserAreaAccess: Permissoes de acesso as areas
- UserDashboardAccess: Permissoes especificas de dashboards
### Relacionamentos
- User 1:N UserAreaAccess N:1 Area
- User 1:N UserDashboardAccess N:1 Dashboard
- Area 1:N Dashboard